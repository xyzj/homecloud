# This is a default site configuration which will simply return 404, preventing
# chance access to any other virtualhost.
server {
        listen 80;
        server_name v4.xyzjx.xyz xyzjx.xyz;
        rewrite ^(.*)$ https://${server_name}$1 permanent;
}
server {
#       listen 80;
        listen 443 ssl;
        server_name v4.xyzjx.xyz;
        ssl_certificate       /root/bin/ca/xyzjx.xyz.crt;
        ssl_certificate_key   /root/bin/ca/xyzjx.xyz.key;
        ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;
        location / {
                proxy_pass http://127.0.0.1:2052;
                proxy_redirect off;
                proxy_set_header X-real-ip $remote_addr;
                proxy_set_header Host $http_host;
        }
}
server {
#       listen 80;
        listen 443 ssl;
        server_name xyzjx.xyz;
        ssl_certificate       /root/bin/ca/xyzjx.xyz.crt;
        ssl_certificate_key   /root/bin/ca/xyzjx.xyz.key;
        ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;
        location / {
                proxy_pass http://127.0.0.1:2052/short/;
                proxy_redirect off;
                proxy_set_header X-real-ip $remote_addr;
                proxy_set_header Host $http_host;
        }
}
server {
	listen 80;
	# listen [::]:10726 default_server;
	listen 443 ssl;

	server_name v2cf.xyzjx.xyz v2cf.xyzjdays.xyz;

        ssl_certificate       /root/bin/ca/xyzjx.xyz.crt;
        ssl_certificate_key   /root/bin/ca/xyzjx.xyz.key;
        ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;

	# Everything is a 404
	location / {
		return 404;
	}

	# You may need this to prevent return 404 recursion.
	location = /404.html {
		internal;
	}
	
	location /xx {
		proxy_redirect off;
                proxy_pass http://127.0.0.1:6891;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $http_host;
	}
}
